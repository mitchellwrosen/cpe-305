{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f36\froman\fcharset238\fprq2 Times New Roman CE;}
{\f37\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f39\froman\fcharset161\fprq2 Times New Roman Greek;}{\f40\froman\fcharset162\fprq2 Times New Roman Tur;}{\f41\froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\f42\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f43\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f44\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\rsidtbl \rsid2102263\rsid3409130\rsid10255008\rsid14700200\rsid16592086}
{\*\generator Microsoft Word 10.0.2627;}{\info{\author Clinton Staley}{\operator cstaley}{\creatim\yr2001\mo12\dy27\hr15\min52}{\revtim\yr2005\mo4\dy12\hr11\min1}{\version11}{\edmins200}{\nofpages3}{\nofwords778}{\nofchars4441}
{\*\company Software Inventions}{\nofcharsws5209}{\vern16437}}\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot\nolnhtadjtbl\rsidroot2102263 \fet0\sectd \linex0\endnhere\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang 
{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain 
\qc \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0\pararsid16592086 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\fs36\insrsid16592086\charrsid16592086 Specific C++}{\b\fs36\insrsid16592086 /VS}{
\b\fs36\insrsid16592086\charrsid16592086  Pitfalls to Avoid
\par }{\b\fs22\insrsid16592086 
\par }\pard \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 {\b\fs22\insrsid16592086 1.  Using allocation to satisfy an out parameter.
\par 
\par }{\fs22\insrsid16592086 A method with
 a pointer-based out parameter:  Func1(int *outParam) expects the address of a variable in the caller, and will use that address to "reach back" into the caller and fill in that variable.  Such a situation rarely if ever calls for dynamic allocation, but 
C++ beginners often do this.   This needlessly complicates your code and invites storage leaks.
\par 
\par Right: \tab \tab \tab \tab \tab \tab Wrong:
\par 
\par int myVariable;\tab \tab \tab \tab \tab int *myPtr = new int;
\par 
\par Func1(&myVariable);\tab \tab \tab \tab Func1(myPtr);
\par 
\par 
\par }{\b\fs22\insrsid16592086 2.  Linker errors
\par }{\fs22\insrsid16592086 Linker errors such as the following in Unix, or similar such errors under Visual, are often due to missing a scope qualifer on a method, or to omitting a definition of a static member datum.
\par }{\b\fs22\insrsid16592086 
\par }{\fs22\insrsid16592086 Undefined                       first referenced
\par  symbol                             in file
\par OthelloBoard::othOpts               /var/tmp/cc40Mnoa.o
\par ld: fatal: Symbol referencing errors. No output written to a.out
\par collect2: ld returned 1 exit status
\par 
\par }{\b\fs22\insrsid16592086 3. String conversion}{\fs22\insrsid16592086 
\par Since operator<< is overloaded to do binary I/O in Board and Move, you cannot get a Boa
rd or Move object printed as a string by using cout << brd or cout << mv.    There is an appropriate way to make it clear that you want to print a string derived from the Board or Move -- this is for you to figure out.
\par 
\par }{\b\fs22\insrsid16592086 4. Public modifier in inheritance
\par }{\fs22\insrsid16592086 If
 you find the compiler behaving as though an inheritance relationship you've clearly defined simply doesn't exist, remember that missing the "public" modifier in the inheritance declaration makes the inheritance relationship private.
\par 
\par }{\b\fs22\insrsid16592086 5. RTTI}{\fs22\insrsid16592086 
\par Under Visual Studio, dynamic_cast and other RTTI-related features will fail to compile or will exhibit mysterious bugs if you don't enable RTTI as a part of the project}{\fs22\insrsid2102263  settings.  See Project Properties|C/C++|}{
\fs22\insrsid16592086 Language}{\fs22\insrsid2102263 |Enable Runtime Type Info}{\fs22\insrsid16592086 .  Be sure you turn RTTI on for both release and debug builds.}{\fs22\insrsid3409130   If you\rquote 
re using commandline compiles, you need the /GR flag to get RTTI turned on.}{\fs22\insrsid16592086 
\par 
\par }{\b\fs22\insrsid16592086 6. You must destruct an ostream to close it.}{\fs22\insrsid16592086 
\par An ostream object remains open until you either close it deliberately with an
 appropriate method call or destruct it.  I like the latter, which I arrange by making my ostream declaration a local-scope object that destructs at the end of the current code block.
\par 
\par }{\b\fs22\insrsid16592086 7. Debug mode is 3 times slower than release mode}{\fs22\insrsid16592086 
\par The apps I release as speed benchmarks in later milestones are built in release mode.  If you're trying to match my speed, you need to build in release mode as well.
\par 
\par }{\b\fs22\insrsid16592086 8. FString and std::string
\par }{\fs22\insrsid16592086 You will definitely want to use FString from MyLib.h to assemble strings in at leas
t some cases.  Also, note that std::string doesn't automatically resize when you index it; it does so only if you use operations like append or +=.  The FString constructor is a variadic method, so you must pass arguments that match the format specifiers 
}{\i\fs22\insrsid16592086 precisely}{\fs22\insrsid16592086 .  No conversions will be made for you; mismatched types will simply cause mysterious failures.
\par 
\par }{\b\fs22\insrsid16592086 9. Watch out for #include <iostream.h>
\par }{\fs22\insrsid16592086 To get a version of iostream where the istream and ostream are}{\fs22\insrsid10255008  in the std namespace }{\fs22\insrsid16592086 you need to use #include <iostream>.
\par 
\par }{\b\fs22\insrsid16592086 10. SScanf info}{\fs22\insrsid16592086 
\par Sscanf lets you read in a single character via the %c format specifier, with the address of a char the expected corresponding parameter.  However, this specifier will *not* skip blank spaces unless you preceded it with a blank spa
ce in the format specifier.
\par 
\par You may find }{\fs22\insrsid10255008 parsing moves}{\fs22\insrsid16592086  requires checking that *fewer* than the requested number of items was read.
\par 
\par }{\b\fs22\insrsid16592086 11. Dynamic_cast<> cannot convert from a const to a nonconst}{\fs22\insrsid16592086 .  
\par You have to preserve the constness even if you're downcasting the type.
\par 
\par }{\b\fs22\insrsid16592086 12. EOF logic}{\fs22\insrsid16592086 
\par }{\fs22\insrsid10255008 A}{\fs22\insrsid16592086  stream is in EOF state only after you have tried to read past EOF, not when you've read everything up to the end of file but no further.
\par 
\par }{\b\fs22\insrsid16592086 13. Avoid precompiled headers
\par }{\fs22\insrsid16592086 The precompiled header system is not needed for this proje
ct, but you may have inadvertently turned it on when you created the project file.  To turn off PCH, go to Project Properties |C/C++|Precompiled Headers.  Turn off PCH for both debug and release versions of your entire project.}{\fs22\insrsid14700200 
  (And while we're at it, note that any change of project settings needs to be done for both forms of the build.)}{\fs22\insrsid16592086 
\par 
\par }{\b\fs22\insrsid16592086 14. Catch exceptions by reference.
\par }{\fs22\insrsid16592086 You may find problems getting my main to catch your exceptions if you
\par tested yours by a catch like this:
\par 
\par catch (BaseException err)
\par 
\par where mine is:
\par 
\par catch (BaseException &err)
\par 
\par }{\b\fs22\insrsid16592086 15. Warning C4786}{\fs22\insrsid16592086 
\par Visual C++ 6.0 (not sure about VS.NET) will generate very impressive looking 3-4 line warning messages filled with template notation, with the warning number 4786.  This has to do with name mangling, and these warnings may be safely ignored.  You can turn
 them off by putting the following at the head of your file.
\par 
\par #pragma warning (disable: 4786)
\par 
\par }{\b\fs22\insrsid16592086 16. Class declaration nesting does not imply object nesting}{\fs22\insrsid16592086 
\par Nested classes are used to scope the name of the nested class within the name of the enclosing class.  This does }{\i\fs22\insrsid16592086 not}{\fs22\insrsid16592086 
 imply that objects of the enclosing class must have an object of the nested class within them.  Don't assume that the syntax of nesting is reflected in the structure of the objects themselves. 
\par }}